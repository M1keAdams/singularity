# Legacy bootstrap for user who requires cuda 7.5 and has their own cudnn lasagna, and theano
Bootstrap: docker
From: nvidia/cuda:7.5-runtime-ubuntu14.04

%setup
# Copy any necessary files

%environment

    # Use bash as default shell
    SHELL=/bin/bash

    # Add CUDA paths
    CPATH="/usr/local/cuda/include:$CPATH"
    CPATH="/gpfs/home/yva10thu/esscratch/CNN_scripts/cuda/include:$CPATH"
    PATH="/usr/local/cuda/bin:$PATH"
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
    LD_LIBRARY_PATH="/gpfs/home/yva10thu/esscratch/CNN_scripts/cuda/lib64:$LD_LIBRARY_PATH"
    LIBRARY_PATH="/gpfs/home/yva10thu/esscratch/CNN_scripts/cuda/lib64:$LD_LIBRARY_PATH"
    CUDA_HOME="/usr/local/cuda"

    # Add NVIDIA paths
    PATH="/usr/local/NVIDIA-Linux-x86_64-375.26:$PATH"
    LD_LIBRARY_PATH="/usr/local/NVIDIA-Linux-x86_64-375.26:$LD_LIBRARY_PATH"

    # Add Anaconda path
    PATH="/usr/local/anaconda3-5.0.0.1/bin:$PATH"

    # Add theano flags
    THEANO_FLAGS=device=cuda0

    export PATH LD_LIBRARY_PATH CPATH CUDA_HOME THEANO_FLAGS

%post
    # Make gpfs folder to hold mount
    mkdir /gpfs

    # Update and install some necessary tools
    apt-get update
    apt-get install -y vim wget git

    # Create and move to build directory
    mkdir build && cd build

    # Download and install NVIDIA drivers
    wget http://us.download.nvidia.com/XFree86/Linux-x86_64/375.26/NVIDIA-Linux-x86_64-375.26.run
    sh NVIDIA-Linux-x86_64-375.26.run -x
    mv NVIDIA-Linux-x86_64-375.26 /usr/local
    cd /usr/local/NVIDIA-Linux-x86_64-375.26

    # Make links
    ln -s libcuda.so.375.26 libcuda.so
    ln -s libEGL.so.375.26 libEGL.so
    ln -s libGLESv1_CM.so.375.26 libGLESv1_CM.so
    ln -s libGLESv2.so.375.26 libGLESv2.so
    ln -s libGL.so.375.26 libGL.so
    ln -s libglx.so.375.26 libglx.so
    ln -s libnvcuvid.so.375.26 libnvcuvid.so
    ln -s libnvidia-cfg.so.375.26 libnvidia-cfg.so
    ln -s libnvidia-compiler.so.375.26 libnvidia-compiler.so
    ln -s libnvidia-eglcore.so.375.26 libnvidia-eglcore.so
    ln -s libnvidia-encode.so.375.26 libnvidia-encode.so
    ln -s libnvidia-fbc.so.375.26 libnvidia-fbc.so
    ln -s libnvidia-glcore.so.375.26 libnvidia-glcore.so
    ln -s libnvidia-glsi.so.375.26 libnvidia-glsi.so
    ln -s libnvidia-gtk2.so.375.26 libnvidia-gtk2.so
    ln -s libnvidia-gtk3.so.375.26 libnvidia-gtk3.so
    ln -s libnvidia-ifr.so.375.26 libnvidia-ifr.so
    ln -s libnvidia-ml.so.375.26 libnvidia-ml.so
    ln -s libnvidia-ml.so.375.26 libnvidia-ml.so.1
    ln -s libnvidia-opencl.so.375.26 libnvidia-opencl.so
    ln -s libnvidia-tls.so.375.26 libnvidia-tls.so
    ln -s libnvidia-wfb.so.375.26 libnvidia-wfb.so
    ln -s libvdpau_nvidia.so.375.26 libvdpau_nvidia.so
    ln -s libvdpau.so.375.26 libvdpau.so
    ln -s libvdpau_trace.so.375.26 libvdpau_trace.so
    ln -s libcuda.so.375.26 libcuda.so.1

    # Download and install Anaconda
    CONDA_INSTALL_PATH="/usr/local/anaconda3-5.0.0.1"
    wget https://repo.continuum.io/archive/Anaconda3-5.0.0.1-Linux-x86_64.sh
    chmod +x Anaconda3-5.0.0.1-Linux-x86_64.sh
    ./Anaconda3-5.0.0.1-Linux-x86_64.sh -b -p $CONDA_INSTALL_PATH
    PATH="/usr/local/anaconda3-5.0.0.1/bin:$PATH"
